# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""

inp = input("Веведите IP сети, или хоста, и маску: ")
parse_input = inp.split("/")
ip = parse_input[0].split(".")
ip_bin = '{:08b}'.format(int(ip[0])) + '{:08b}'.format(int(ip[1])) + '{:08b}'.format(int(ip[2])) + '{:08b}'.format(int(ip[3]))

mask = int(parse_input[1])
ip  = ip_bin[0:mask] + "0"*(32-mask)
mask_bin = ("1" * mask + "0" * (32 - mask))
maskb_okt1, maskb_okt2, maskb_okt3, maskb_okt4 = mask_bin[0:8], mask_bin[8:16], mask_bin[16:24], mask_bin[24:32]

template_network = '''
Network:
{0:<10}{1:<10}{2:<10}{3:<10}
{0:08b}  {1:08b}  {2:08b}  {3:08b}

Mask:
/{4}
{5:<10}{6:<10}{7:<10}{8:<10}
{5:08b}  {6:08b}  {7:08b}  {8:08b}
'''
print(template_network.format(int(ip[0:8], 2),int(ip[8:16], 2),int(ip[16:24], 2),int(ip[24:32], 2), mask, 
      int(maskb_okt1, 2), int(maskb_okt2, 2), int(maskb_okt3, 2), int(maskb_okt4,2)))
      
      
      
      
      
      
      